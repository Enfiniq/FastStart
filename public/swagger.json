{
  "openapi": "3.0.3",
  "info": {
    "title": "FastStart API",
    "description": "Registry for reusable code snippets with email and embeddings utilities",
    "version": "0.0.0",
    "contact": {
      "name": "Enfiniq",
      "url": "https://github.com/Enfiniq/FastStart"
    }
  },
  "servers": [
    {
      "url": "https://faststart.neploom.com",
      "description": "Production server"
    }
  ],
  "components": {
    "securitySchemes": {
      "FastStartKey": {
        "type": "http",
        "scheme": "bearer",
        "description": "Package-specific authentication key"
      },
      "ScopeSpecificKey": {
        "type": "http",
        "scheme": "bearer",
        "description": "Scope-specific authentication key"
      },
      "AdminKey": {
        "type": "http",
        "scheme": "bearer",
        "description": "Administrative access key"
      }
    },
    "schemas": {
      "KeyRequest": {
        "type": "object",
        "required": ["fastStartName"],
        "properties": {
          "fastStartName": {
            "type": "string",
            "description": "Package name (e.g., 'my-package' or '@org/package')",
            "pattern": "^(?:@[a-zA-Z0-9_-]+(?:\\/[a-zA-Z0-9_-]+)?|[a-zA-Z0-9_-]+)$"
          }
        }
      },
      "KeyResponse": {
        "type": "object",
        "properties": {
          "success": { "type": "boolean" },
          "fastStartName": { "type": "string" },
          "fastKey": { "type": "string" },
          "message": { "type": "string" }
        }
      },
      "FastStartRecord": {
        "type": "object",
        "required": ["name", "fastStart", "author", "type"],
        "properties": {
          "id": { "type": "integer", "description": "Database ID" },
          "name": { "type": "string" },
          "fastStart": { "type": "string" },
          "author": { "type": "string" },
          "type": { "type": "string" },
          "versions": {
            "type": "array",
            "items": { "type": "string" },
            "default": ["1.0.0"]
          },
          "created_at": { "type": "string", "format": "date-time" },
          "updated_at": { "type": "string", "format": "date-time" }
        }
      },
      "FastStartRecordInput": {
        "type": "object",
        "required": ["name", "fastStart", "author", "type"],
        "properties": {
          "name": { "type": "string" },
          "fastStart": { "type": "string" },
          "author": { "type": "string" },
          "type": { "type": "string" },
          "versions": {
            "type": "array",
            "items": { "type": "string" },
            "default": ["1.0.0"]
          }
        }
      },
      "PackageData": {
        "type": "object",
        "required": ["name", "fastStart", "versions", "type", "author"],
        "properties": {
          "name": { "type": "string" },
          "fastStart": { "type": "string" },
          "versions": {
            "type": "array",
            "items": { "type": "string" }
          },
          "type": { "type": "string" },
          "author": { "type": "string" }
        }
      },
      "StartsRequest": {
        "type": "object",
        "properties": {
          "limit": {
            "type": "integer",
            "minimum": 1,
            "maximum": 100,
            "default": 50
          },
          "offset": {
            "type": "integer",
            "minimum": 0,
            "default": 0
          },
          "type": {
            "type": "string",
            "enum": ["faststart", "author"],
            "default": "author"
          },
          "scope": {
            "type": "string",
            "description": "Scope filter ('@' for all scopes, '@org' for specific)"
          }
        }
      },
      "EmailRecipient": {
        "type": "object",
        "required": ["username", "email"],
        "properties": {
          "username": { "type": "string" },
          "email": { "type": "string", "format": "email" }
        }
      },
      "EmailSender": {
        "type": "object",
        "required": ["email"],
        "properties": {
          "name": { "type": "string" },
          "email": { "type": "string", "format": "email" },
          "user": { "type": "string" },
          "app_password": { "type": "string" }
        }
      },
      "EmailData": {
        "type": "object",
        "properties": {
          "companyName": { "type": "string" },
          "verificationCode": { "type": "string" },
          "resetPasswordCode": { "type": "string" },
          "cta": {
            "type": "object",
            "properties": {
              "text": { "type": "string" },
              "url": { "type": "string", "format": "uri" }
            }
          }
        }
      },
      "EmailRequest": {
        "type": "object",
        "required": ["templateName", "recipients"],
        "properties": {
          "templateName": {
            "type": "string",
            "enum": [
              "verify-email",
              "reset-password-email",
              "welcome-email",
              "newsletter-email"
            ]
          },
          "recipients": {
            "type": "array",
            "items": { "$ref": "#/components/schemas/EmailRecipient" }
          },
          "subject": { "type": "string" },
          "content": {
            "type": "array",
            "items": { "type": "string" }
          },
          "text": { "type": "string" },
          "sender": { "$ref": "#/components/schemas/EmailSender" },
          "data": { "$ref": "#/components/schemas/EmailData" }
        }
      },
      "EmbeddingsRequest": {
        "type": "object",
        "required": ["text"],
        "properties": {
          "text": { "type": "string" }
        }
      },
      "EmbeddingsResponse": {
        "type": "object",
        "properties": {
          "text": { "type": "string" },
          "embeddings": {
            "type": "array",
            "items": { "type": "number" }
          },
          "dimensions": { "type": "integer", "example": 384 }
        }
      },
      "ErrorResponse": {
        "type": "object",
        "properties": {
          "error": { "type": "string" },
          "message": { "type": "string" }
        }
      },
      "StandardErrorResponse": {
        "type": "object",
        "properties": {
          "success": { "type": "boolean", "example": false },
          "message": { "type": "string" }
        }
      }
    },
    "responses": {
      "BadRequest": {
        "description": "Bad Request",
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/ErrorResponse" }
          }
        }
      },
      "Unauthorized": {
        "description": "Unauthorized",
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/ErrorResponse" }
          }
        }
      },
      "NotFound": {
        "description": "Not Found",
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/ErrorResponse" }
          }
        }
      },
      "Conflict": {
        "description": "Conflict",
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/ErrorResponse" }
          }
        }
      },
      "Forbidden": {
        "description": "Forbidden",
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/ErrorResponse" }
          }
        }
      },
      "InternalServerError": {
        "description": "Internal Server Error",
        "content": {
          "application/json": {
            "schema": { "$ref": "#/components/schemas/ErrorResponse" }
          }
        }
      }
    }
  },
  "paths": {
    "/api/key": {
      "post": {
        "tags": ["Authentication"],
        "summary": "Generate FastStartKey",
        "description": "Creates a new FastStartKey for authenticating package operations. For scoped packages, requires scope-level authentication.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/KeyRequest" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Key generated successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/KeyResponse" }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "409": {
            "description": "FastStart name already exists",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "FastStart name already exists"
                    },
                    "message": {
                      "type": "string",
                      "example": "The fastStart name 'my-package' is already registered. Each fastStart name can only have one FAST key to prevent naming conflicts. If you lost your FAST key, please contact support for assistance."
                    },
                    "existingFastStart": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string"
                        },
                        "fastStart": {
                          "type": "string"
                        },
                        "versions": {
                          "type": "array",
                          "items": {
                            "type": "string"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "500": { "$ref": "#/components/responses/InternalServerError" }
        }
      }
    },
    "/api/database": {
      "get": {
        "tags": ["Database"],
        "summary": "List packages from database",
        "description": "Lists packages from PostgreSQL database with filtering and pagination",
        "security": [{ "FastStartKey": [] }],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "schema": { "type": "string" },
            "description": "Filter by package name (partial match)"
          },
          {
            "name": "author",
            "in": "query",
            "schema": { "type": "string" },
            "description": "Filter by author name (partial match)"
          },
          {
            "name": "type",
            "in": "query",
            "schema": { "type": "string" },
            "description": "Filter by package type (exact match)"
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer",
              "minimum": 1,
              "maximum": 100,
              "default": 50
            },
            "description": "Number of results"
          },
          {
            "name": "offset",
            "in": "query",
            "schema": { "type": "integer", "minimum": 0, "default": 0 },
            "description": "Pagination offset"
          }
        ],
        "responses": {
          "200": {
            "description": "Packages retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/FastStartRecord"
                      }
                    },
                    "total": { "type": "integer" },
                    "limit": { "type": "integer" },
                    "offset": { "type": "integer" }
                  }
                }
              }
            }
          },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "500": { "$ref": "#/components/responses/InternalServerError" }
        }
      },
      "post": {
        "tags": ["Database"],
        "summary": "Sync package to GitHub",
        "description": "Syncs a package from database to GitHub registry",
        "security": [{ "FastStartKey": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["name"],
                "properties": {
                  "name": { "type": "string" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Package synced successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string",
                      "example": "Package posted to GitHub registry"
                    },
                    "package": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "500": { "$ref": "#/components/responses/InternalServerError" }
        }
      },
      "put": {
        "tags": ["Database"],
        "summary": "Create or update package",
        "description": "Creates or updates a package in the database",
        "security": [{ "FastStartKey": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/FastStartRecordInput" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Package created/updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string",
                      "example": "Package created successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/FastStartRecord"
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "500": { "$ref": "#/components/responses/InternalServerError" }
        }
      },
      "delete": {
        "tags": ["Database"],
        "summary": "Remove package",
        "description": "Removes package from both database and GitHub registry",
        "security": [{ "FastStartKey": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["name"],
                "properties": {
                  "name": { "type": "string" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Package removed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string",
                      "example": "Package deleted from both database and GitHub registry"
                    },
                    "package": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "500": { "$ref": "#/components/responses/InternalServerError" }
        }
      }
    },
    "/api/packages": {
      "get": {
        "tags": ["GitHub Registry"],
        "summary": "List packages from GitHub registry",
        "description": "Lists packages from GitHub registry with filtering support",
        "parameters": [
          {
            "name": "fastStartName",
            "in": "query",
            "schema": { "type": "string" },
            "description": "Filter by package name (partial match)"
          },
          {
            "name": "type",
            "in": "query",
            "schema": { "type": "string" },
            "description": "Filter by package type"
          },
          {
            "name": "author",
            "in": "query",
            "schema": { "type": "string" },
            "description": "Filter by author name"
          },
          {
            "name": "url",
            "in": "query",
            "schema": { "type": "string" },
            "description": "Filter by fastStart URL"
          },
          {
            "name": "version",
            "in": "query",
            "schema": { "type": "string" },
            "description": "Filter by specific version"
          }
        ],
        "responses": {
          "200": {
            "description": "Packages retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "packages": {
                      "type": "object",
                      "additionalProperties": {
                        "$ref": "#/components/schemas/PackageData"
                      }
                    },
                    "total": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "500": { "$ref": "#/components/responses/InternalServerError" }
        }
      },
      "put": {
        "tags": ["GitHub Registry"],
        "summary": "Add or update package",
        "description": "Adds or updates a package in GitHub registry",
        "security": [{ "FastStartKey": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/PackageData" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Package created/updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string",
                      "example": "Package created successfully"
                    },
                    "package": {
                      "type": "object",
                      "properties": {
                        "name": { "type": "string" },
                        "fastStart": { "type": "string" },
                        "versions": {
                          "type": "array",
                          "items": { "type": "string" }
                        },
                        "type": { "type": "string" },
                        "author": { "type": "string" },
                        "updatedAt": { "type": "string" }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "403": { "$ref": "#/components/responses/Forbidden" },
          "500": { "$ref": "#/components/responses/InternalServerError" }
        }
      },
      "delete": {
        "tags": ["GitHub Registry"],
        "summary": "Remove package",
        "description": "Removes a package from GitHub registry",
        "security": [{ "FastStartKey": [] }],
        "parameters": [
          {
            "name": "name",
            "in": "query",
            "required": true,
            "schema": { "type": "string" },
            "description": "Package name to delete"
          }
        ],
        "responses": {
          "200": {
            "description": "Package removed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string",
                      "example": "Package 'my-package' deleted successfully"
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "500": { "$ref": "#/components/responses/InternalServerError" }
        }
      }
    },
    "/api/starts": {
      "post": {
        "tags": ["Package Discovery"],
        "summary": "Search packages or authors",
        "description": "Searches packages or authors with pagination and scope filtering",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/StartsRequest" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Search results retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    },
                    "total": {
                      "type": "integer"
                    },
                    "limit": {
                      "type": "integer"
                    },
                    "offset": {
                      "type": "integer"
                    },
                    "type": {
                      "type": "string",
                      "enum": ["faststart", "author", "scopes"]
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "500": { "$ref": "#/components/responses/InternalServerError" }
        }
      }
    },
    "/api/files": {
      "get": {
        "tags": ["Content Retrieval"],
        "summary": "Get package content",
        "description": "Retrieves file content from a FastStart package. Supports versioning and direct URLs with '!' prefix in the github repo faststart url",
        "parameters": [
          {
            "name": "fastStart",
            "in": "query",
            "required": true,
            "schema": { "type": "string" },
            "description": "Package name with optional version (e.g., 'package-name' or 'package-name@1.0.0')"
          }
        ],
        "responses": {
          "200": {
            "description": "File content retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "target": { "type": "string" },
                      "content": { "type": "string" }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "500": { "$ref": "#/components/responses/InternalServerError" }
        }
      }
    },
    "/api/utils/email": {
      "get": {
        "tags": ["Email Service"],
        "summary": "Preview email templates",
        "description": "Previews email templates in HTML format",
        "parameters": [
          {
            "name": "template",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "verify-email",
                "reset-password-email",
                "welcome-email",
                "newsletter-email"
              ]
            },
            "description": "Template to preview"
          }
        ],
        "responses": {
          "200": {
            "description": "Template preview",
            "content": {
              "text/html": {
                "schema": { "type": "string" }
              }
            }
          },
          "400": {
            "description": "Bad request or invalid template",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Missing required 'template' query parameter"
                    },
                    "supportedTemplates": {
                      "type": "array",
                      "items": {
                        "type": "string"
                      },
                      "example": [
                        "verify-email",
                        "reset-password-email",
                        "welcome-email",
                        "newsletter-email"
                      ]
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Template generation failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": false
                    },
                    "message": {
                      "type": "string",
                      "example": "Failed to generate email template"
                    },
                    "error": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": ["Email Service"],
        "summary": "Send emails",
        "description": "Sends emails using predefined templates to multiple recipients",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/EmailRequest" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Email operation result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    },
                    "details": {
                      "type": "object",
                      "properties": {
                        "totalSent": {
                          "type": "integer"
                        },
                        "totalRecipients": {
                          "type": "integer"
                        },
                        "errors": {
                          "type": "array",
                          "items": {
                            "type": "object"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "500": { "$ref": "#/components/responses/InternalServerError" }
        }
      }
    },
    "/api/utils/embeddings": {
      "post": {
        "tags": ["Vector Embeddings"],
        "summary": "Generate embeddings",
        "description": "Generates 384-dimensional vector embeddings for text input using Supabase/gte-small model",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/EmbeddingsRequest" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Embeddings generated successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/EmbeddingsResponse" }
              }
            }
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "500": { "$ref": "#/components/responses/InternalServerError" }
        }
      }
    },
    "/api/registry": {
      "get": {
        "tags": ["Admin Access"],
        "summary": "Get registry data",
        "description": "Retrieves raw registry data from GitHub repository",
        "security": [{ "AdminKey": [] }],
        "parameters": [
          {
            "name": "action",
            "in": "query",
            "schema": {
              "type": "string",
              "enum": ["getRegistry"]
            },
            "description": "Optional action for getting registry with SHA"
          }
        ],
        "responses": {
          "200": {
            "description": "Registry data retrieved successfully"
          },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "500": { "$ref": "#/components/responses/InternalServerError" }
        }
      },
      "put": {
        "tags": ["Admin Access"],
        "summary": "Update registry",
        "description": "Updates registry content directly on GitHub",
        "security": [{ "AdminKey": [] }],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": ["action", "registry", "sha"],
                "properties": {
                  "action": {
                    "type": "string",
                    "enum": ["updateRegistry"]
                  },
                  "registry": { "type": "object" },
                  "sha": { "type": "string" }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Registry updated successfully"
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "500": { "$ref": "#/components/responses/InternalServerError" }
        }
      },
      "delete": {
        "tags": ["Admin Access"],
        "summary": "Remove package",
        "description": "Removes specific packages from GitHub registry",
        "security": [{ "AdminKey": [] }],
        "parameters": [
          {
            "name": "packageName",
            "in": "query",
            "required": true,
            "schema": { "type": "string" },
            "description": "Package name to remove"
          }
        ],
        "responses": {
          "200": {
            "description": "Package removed successfully"
          },
          "400": { "$ref": "#/components/responses/BadRequest" },
          "401": { "$ref": "#/components/responses/Unauthorized" },
          "404": { "$ref": "#/components/responses/NotFound" },
          "500": { "$ref": "#/components/responses/InternalServerError" }
        }
      }
    }
  },
  "tags": [
    {
      "name": "Authentication",
      "description": "FastStartKey generation and management"
    },
    {
      "name": "Database",
      "description": "PostgreSQL database operations with GitHub sync"
    },
    {
      "name": "GitHub Registry",
      "description": "Direct GitHub registry management"
    },
    {
      "name": "Package Discovery",
      "description": "Search and discover packages"
    },
    {
      "name": "Content Retrieval",
      "description": "Get package file content"
    },
    {
      "name": "Email Service",
      "description": "Email templates and sending"
    },
    {
      "name": "Vector Embeddings",
      "description": "Text embedding generation"
    },
    {
      "name": "Admin Access",
      "description": "Administrative registry operations"
    }
  ]
}
